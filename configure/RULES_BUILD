#	State notation language (snc) rules
# Each <name>.st (or <name>.stt) produces <name>.c


#--------------------------------------------------
# snc flags

TARGET_SNCFLAGS = $($(basename $@)_SNCFLAGS) $($(basename $@)_SNCFLAGS_$(OS_CLASS))

#  addons -  concat os specific sequencer flags
ifneq ($(strip $(SNCFLAGS_$(OS_CLASS))),)
SNCFLAGS += $(subst -nil-,,$(SNCFLAGS_$(OS_CLASS)))
else
ifdef SNCFLAGS_DEFAULT
SNCFLAGS += $(SNCFLAGS_DEFAULT)
endif
endif

#--------------------------------------------------
# vpath

vpath %.st $(USR_VPATH) $(ALL_SRC_DIRS)
vpath %.stt $(USR_VPATH) $(ALL_SRC_DIRS)

#--------------------------------------------------
# depends rule needs .c files

SNC_SRC_FILES = $(basename $(notdir $(filter %.st %.stt,$(SRC_FILES))))
SNC_CSRC_FILES =  $(addsuffix .c,$(SNC_SRC_FILES))
HDEPENDS_FILES_YES += $(addsuffix $(DEP),$(basename $(SNC_CSRC_FILES)))

#--------------------------------------------------
# snc executable


ifdef RULES_TOP
 # EPICS base R3.14.7 and later
 SNC = $(RULES_TOP)/bin/$(EPICS_HOST_ARCH)/snc$(HOSTEXE)
else
 # EPICS base R3.14.6 and earlier
 ifndef SNC
  SNC = $(SNCSEQ_HOST_BIN)/snc$(HOSTEXE)
 endif
endif

# preserve compatibility to base versions before 3.14.12
ifndef ECHO
 NOP = $(PERL) -e ''
 ECHO := $(if $(findstring s,$(MAKEFLAGS)),$(NOP),@echo)
endif


#--------------------------------------------------
# Rules

%.i: %.st
	$(ECHO) "preprocessing $<"
	@$(RM) $@
	$(PREPROCESS.cpp)

%.c: %.i $(SNC)
	$(ECHO) "converting $<"
	$(SNC) $(TARGET_SNCFLAGS) $(SNCFLAGS) $(USR_SNCFLAGS) $(call PATH_FILTER,$<) -o $(@F).tmp
	$(MV) $(@F).tmp $@

%.c: %.stt $(SNC)
	$(ECHO) "converting $< "
	$(SNC) $(TARGET_SNCFLAGS) $(SNCFLAGS) $(USR_SNCFLAGS) $(call PATH_FILTER,$<) -o $(@F).tmp
	$(MV) $(@F).tmp $@

clean::
	@$(RM) $(SNC_CSRC_FILES)

